#!/usr/bin/env sh
#
# bootstrap installs things.

source $DOTHOME/functions/logging

set -e

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  local overwrite_all=false backup_all=false skip_all=false

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]; then

        skip=true

      else

        loguser "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
        o)
          overwrite=true
          ;;
        O)
          overwrite_all=true
          ;;
        b)
          backup=true
          ;;
        B)
          backup_all=true
          ;;
        s)
          skip=true
          ;;
        S)
          skip_all=true
          ;;
        *) ;;

        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      logsuccess "removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      logsuccess "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]; then
      logsuccess "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then # "false" or empty
    ln -s "$1" "$2"
  fi
}

setup_gitconfig () {
  if ! [ -f $DOTHOME/git/gitconfig.local.symlink ]
  then
    loginfo '> setup gitconfig'

    git_credential='cache'

    loguser ' - What is your github author name?'
    read -e git_authorname
    loguser ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/config.local.example > git/config.local.xdg

    logsuccess 'gitconfig'
  fi
}

install_dotfiles () {
  loginfo '> installing dotfiles'

  for src in $(find -H "$DOTHOME" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_XDG_dotfiles () {
  loginfo '> installing dotfiles for XDG_CONFIG_HOME'

  for src in $(find -H "$DOTHOME" -maxdepth 3 -name '*.xdg' -not -path '*.git*')
  do
    # remove base directory from path to configs
    pattern="${DOTHOME}/" 
    config=${src/$pattern/}
    config=${config%.*} # remove .xdg ending
    
    dst="$HOME/.config/$config"
    
    link_file "$src" "$dst"
  done
}

# This creates a .symlink file for global gitconfigs from the example file
setup_gitconfig

# Symlink all regular dotfiles to ~  
install_dotfiles

# Symlink all XDG dotfiles ~/.config/topic/
install_XDG_dotfiles

logsuccess 'Finished!'